{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = null){\n        if (initialState) this.state = initialState;\n        else // Create empty game board\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // Method to set the game status\n    setStatus(newStatus) {\n        this.gameStatus = newStatus;\n    }\n    // Method to get the game status\n    getStatus() {\n        return this.status;\n    }\n    // Method to get the current state of the board\n    getState() {\n        // Return a copy of the state to prevent unintended modifications\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    // Method to get the current score\n    getScore() {\n        return this.score;\n    }\n    // Add this helper method to check if the move changed the board\n    hasChanged(oldState, newState) {\n        return JSON.stringify(oldState) !== JSON.stringify(newState);\n    }\n    // Method to move tiles to the left\n    moveLeft() {\n        if (this.gameStatus !== \"playing\") return;\n        let moved = false;\n        let scoreIncrease = 0;\n        for(let row = 0; row < 4; row++){\n            const cells = this.state[row].filter((cell)=>cell !== 0);\n            // Merge adjacent equal numbers\n            for(let i = 0; i < cells.length - 1; i++)if (cells[i] === cells[i + 1]) {\n                cells[i] *= 2;\n                scoreIncrease += cells[i]; // Add to score when merging\n                cells.splice(i + 1, 1);\n                moved = true;\n                i--; // Check the next pair\n            }\n            // Pad with zeros on the right\n            while(cells.length < 4)cells.push(0);\n            // Check if anything moved\n            if (JSON.stringify(this.state[row]) !== JSON.stringify(cells)) moved = true;\n            this.state[row] = cells;\n        }\n        if (moved) {\n            this.score += scoreIncrease;\n            this.addRandomTile();\n            this.checkGameEnd();\n        }\n        return moved;\n    }\n    // Method to move tiles to the right\n    moveRight() {\n        if (this.gameStatus !== \"playing\") return;\n        let moved = false;\n        let scoreIncrease = 0;\n        for(let row = 0; row < 4; row++){\n            const cells = this.state[row].filter((cell)=>cell !== 0);\n            // Merge adjacent equal numbers\n            for(let i = cells.length - 1; i > 0; i--)if (cells[i] === cells[i - 1]) {\n                cells[i] *= 2;\n                scoreIncrease += cells[i]; // Add to score when merging\n                cells.splice(i - 1, 1);\n                moved = true;\n            }\n            // Pad with zeros on the left\n            while(cells.length < 4)cells.unshift(0);\n            // Check if anything moved\n            if (JSON.stringify(this.state[row]) !== JSON.stringify(cells)) moved = true;\n            this.state[row] = cells;\n        }\n        if (moved) {\n            this.score += scoreIncrease;\n            this.addRandomTile();\n            this.checkGameEnd();\n        }\n        return moved;\n    }\n    // Method to move tiles up\n    moveUp() {\n        if (this.gameStatus !== \"playing\") return;\n        let moved = false;\n        let scoreIncrease = 0;\n        for(let col = 0; col < 4; col++){\n            // Get column as array\n            let cells = [];\n            for(let row = 0; row < 4; row++)cells.push(this.state[row][col]);\n            cells = cells.filter((cell)=>cell !== 0);\n            // Merge adjacent equal numbers\n            for(let i = 0; i < cells.length - 1; i++)if (cells[i] === cells[i + 1]) {\n                cells[i] *= 2;\n                scoreIncrease += cells[i]; // Add to score when merging\n                cells.splice(i + 1, 1);\n                moved = true;\n                i--; // Check the next pair\n            }\n            // Pad with zeros at the bottom\n            while(cells.length < 4)cells.push(0);\n            // Update the column\n            for(let row = 0; row < 4; row++)if (this.state[row][col] !== cells[row]) {\n                moved = true;\n                this.state[row][col] = cells[row];\n            }\n        }\n        if (moved) {\n            this.score += scoreIncrease;\n            this.addRandomTile();\n            this.checkGameEnd();\n        }\n        return moved;\n    }\n    // Method to move tiles down\n    moveDown() {\n        if (this.gameStatus !== \"playing\") return;\n        let moved = false;\n        let scoreIncrease = 0;\n        for(let col = 0; col < 4; col++){\n            // Get column as array\n            let cells = [];\n            for(let row = 0; row < 4; row++)cells.push(this.state[row][col]);\n            cells = cells.filter((cell)=>cell !== 0);\n            // Merge adjacent equal numbers\n            for(let i = cells.length - 1; i > 0; i--)if (cells[i] === cells[i - 1]) {\n                cells[i] *= 2;\n                scoreIncrease += cells[i]; // Add to score when merging\n                cells.splice(i - 1, 1);\n                moved = true;\n            }\n            // Pad with zeros at the top\n            while(cells.length < 4)cells.unshift(0);\n            // Update the column\n            for(let row = 0; row < 4; row++)if (this.state[row][col] !== cells[row]) {\n                moved = true;\n                this.state[row][col] = cells[row];\n            }\n        }\n        if (moved) {\n            this.score += scoreIncrease;\n            this.addRandomTile();\n            this.checkGameEnd();\n        }\n        return moved;\n    }\n    start() {\n        // Reset game board\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"playing\";\n        // Add two starting tiles\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    // Helper method to add a random tile\n    addRandomTile() {\n        const emptyPositions = [];\n        // Find empty spots on the board\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyPositions.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyPositions.length > 0) {\n            // Place new tile in random empty spot\n            const [row, col] = emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\n            // New tile is 2 (90% chance) or 4 (10% chance)\n            this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    // Add this method\n    restart() {\n        // Start fresh game\n        this.start();\n    }\n    hasAvailableMoves() {\n        // Check for possible horizontal merges\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 3; col++){\n            if (this.state[row][col] === this.state[row][col + 1]) return true;\n        }\n        // Check for possible vertical merges\n        for(let row = 0; row < 3; row++)for(let col = 0; col < 4; col++){\n            if (this.state[row][col] === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n    checkGameEnd() {\n        // First check for 2048 tile (win condition)\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 2048) {\n                this.status = \"win\";\n                return true;\n            }\n        }\n        // Check for empty cells\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.state[row][col] === 0) return false; // Game can continue\n        }\n        // If no empty cells, check for possible merges\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 3; col++){\n            if (this.state[row][col] === this.state[row][col + 1]) return false; // Can still merge horizontally\n        }\n        for(let row = 0; row < 3; row++)for(let col = 0; col < 4; col++){\n            if (this.state[row][col] === this.state[row + 1][col]) return false; // Can still merge vertically\n        }\n        // If we get here, no moves are possible\n        this.status = \"lose\";\n        return true;\n    }\n    // Add protected method for board modifications\n    #updateBoard(newBoard) {\n        const oldState = JSON.stringify(this.state);\n        this.state = newBoard;\n        return oldState !== JSON.stringify(this.state);\n    }\n}\n\n\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\n    const startButton = document.querySelector(\".button.start\");\n    const messageStart = document.querySelector(\".message-start\");\n    const messageLose = document.querySelector(\".message-lose\");\n    const messageWin = document.querySelector(\".message-win\");\n    const gameScore = document.querySelector(\".game-score\");\n    const gameField = document.querySelector(\".game-field\");\n    document.body.style.overflow = \"hidden\";\n    document.body.style.position = \"fixed\";\n    document.body.style.width = \"100%\";\n    document.body.style.height = \"100%\";\n    let touchStartX = 0;\n    let touchStartY = 0;\n    const minSwipeDistance = 30;\n    gameField.addEventListener(\"touchstart\", (e)=>{\n        touchStartX = e.touches[0].clientX;\n        touchStartY = e.touches[0].clientY;\n    }, {\n        passive: true\n    });\n    gameField.addEventListener(\"touchmove\", (e)=>{\n        if (game.getStatus() === \"playing\") e.preventDefault();\n    }, {\n        passive: false\n    });\n    gameField.addEventListener(\"touchend\", (e)=>{\n        if (game.getStatus() !== \"playing\") return;\n        const touchEndX = e.changedTouches[0].clientX;\n        const touchEndY = e.changedTouches[0].clientY;\n        const deltaX = touchEndX - touchStartX;\n        const deltaY = touchEndY - touchStartY;\n        if (Math.abs(deltaX) < minSwipeDistance && Math.abs(deltaY) < minSwipeDistance) return;\n        let moved = false;\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n            if (deltaX > 0) moved = game.moveRight();\n            else moved = game.moveLeft();\n        } else if (deltaY > 0) moved = game.moveDown();\n        else moved = game.moveUp();\n        if (moved) updateGameState();\n    }, {\n        passive: false\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        if (game.getStatus() !== \"playing\") return;\n        let moved = false;\n        switch(e.key){\n            case \"ArrowLeft\":\n                moved = game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                moved = game.moveRight();\n                break;\n            case \"ArrowUp\":\n                moved = game.moveUp();\n                break;\n            case \"ArrowDown\":\n                moved = game.moveDown();\n                break;\n            default:\n                return;\n        }\n        if (moved) updateGameState();\n    });\n    function updateGameState() {\n        renderBoard(game.getState());\n        gameScore.textContent = game.getScore();\n        const gameStatus = game.getStatus();\n        messageStart.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n        switch(gameStatus){\n            case \"idle\":\n                messageStart.classList.remove(\"hidden\");\n                startButton.textContent = \"Start\";\n                break;\n            case \"lose\":\n                messageLose.classList.remove(\"hidden\");\n                startButton.textContent = \"Play Again\";\n                break;\n            case \"win\":\n                messageWin.classList.remove(\"hidden\");\n                startButton.textContent = \"Play Again\";\n                break;\n            default:\n                startButton.textContent = \"Restart\";\n        }\n    }\n    function renderBoard(board) {\n        const rows = document.querySelectorAll(\".field-row\");\n        rows.forEach((row, rowIndex)=>{\n            const cells = row.querySelectorAll(\".field-cell\");\n            cells.forEach((cell, cellIndex)=>{\n                const newValue = board[rowIndex][cellIndex];\n                const oldValue = parseInt(cell.textContent) || 0;\n                cell.classList.forEach((className)=>{\n                    if (className.startsWith(\"field-cell--\")) cell.classList.remove(className);\n                });\n                if (newValue === 0) {\n                    cell.textContent = \"\";\n                    cell.className = \"field-cell\";\n                } else {\n                    cell.textContent = newValue;\n                    cell.className = `field-cell field-cell--${newValue}`;\n                    if (oldValue !== newValue) {\n                        if (oldValue === 0) {\n                            cell.classList.add(\"field-cell--new\");\n                            setTimeout(()=>{\n                                cell.classList.remove(\"field-cell--new\");\n                            }, 150);\n                        } else if (newValue === oldValue * 2) {\n                            cell.classList.add(\"field-cell--merged\");\n                            setTimeout(()=>{\n                                cell.classList.remove(\"field-cell--merged\");\n                            }, 150);\n                        }\n                    }\n                }\n            });\n        });\n    }\n    startButton.addEventListener(\"click\", ()=>{\n        if (startButton.classList.contains(\"start\")) {\n            startButton.classList.remove(\"start\");\n            startButton.classList.add(\"restart\");\n            startButton.textContent = \"Restart\";\n            messageStart?.classList.add(\"hidden\");\n        } else game.restart();\n        game.start();\n        game.setStatus(\"playing\");\n        updateGameState();\n    });\n});\n\n\n//# sourceMappingURL=index.3ef097c2.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const startButton = document.querySelector('.button.start');\n  const messageStart = document.querySelector('.message-start');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n  const gameScore = document.querySelector('.game-score');\n  const gameField = document.querySelector('.game-field');\n\n  document.body.style.overflow = 'hidden';\n  document.body.style.position = 'fixed';\n  document.body.style.width = '100%';\n  document.body.style.height = '100%';\n\n  let touchStartX = 0;\n  let touchStartY = 0;\n  const minSwipeDistance = 30;\n\n  gameField.addEventListener(\n    'touchstart',\n    (e) => {\n      touchStartX = e.touches[0].clientX;\n      touchStartY = e.touches[0].clientY;\n    },\n    { passive: true },\n  );\n\n  gameField.addEventListener(\n    'touchmove',\n    (e) => {\n      if (game.getStatus() === 'playing') {\n        e.preventDefault();\n      }\n    },\n    { passive: false },\n  );\n\n  gameField.addEventListener(\n    'touchend',\n    (e) => {\n      if (game.getStatus() !== 'playing') {\n        return;\n      }\n\n      const touchEndX = e.changedTouches[0].clientX;\n      const touchEndY = e.changedTouches[0].clientY;\n\n      const deltaX = touchEndX - touchStartX;\n      const deltaY = touchEndY - touchStartY;\n\n      if (\n        Math.abs(deltaX) < minSwipeDistance &&\n        Math.abs(deltaY) < minSwipeDistance\n      ) {\n        return;\n      }\n\n      let moved = false;\n\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (deltaX > 0) {\n          moved = game.moveRight();\n        } else {\n          moved = game.moveLeft();\n        }\n      } else {\n        if (deltaY > 0) {\n          moved = game.moveDown();\n        } else {\n          moved = game.moveUp();\n        }\n      }\n\n      if (moved) {\n        updateGameState();\n      }\n    },\n    { passive: false },\n  );\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        moved = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        moved = game.moveRight();\n        break;\n      case 'ArrowUp':\n        moved = game.moveUp();\n        break;\n      case 'ArrowDown':\n        moved = game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    if (moved) {\n      updateGameState();\n    }\n  });\n\n  function updateGameState() {\n    renderBoard(game.getState());\n    gameScore.textContent = game.getScore();\n\n    const gameStatus = game.getStatus();\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    switch (gameStatus) {\n      case 'idle':\n        messageStart.classList.remove('hidden');\n        startButton.textContent = 'Start';\n        break;\n      case 'lose':\n        messageLose.classList.remove('hidden');\n        startButton.textContent = 'Play Again';\n        break;\n      case 'win':\n        messageWin.classList.remove('hidden');\n        startButton.textContent = 'Play Again';\n        break;\n      default:\n        startButton.textContent = 'Restart';\n    }\n  }\n\n  function renderBoard(board) {\n    const rows = document.querySelectorAll('.field-row');\n\n    rows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('.field-cell');\n\n      cells.forEach((cell, cellIndex) => {\n        const newValue = board[rowIndex][cellIndex];\n        const oldValue = parseInt(cell.textContent) || 0;\n\n        cell.classList.forEach((className) => {\n          if (className.startsWith('field-cell--')) {\n            cell.classList.remove(className);\n          }\n        });\n\n        if (newValue === 0) {\n          cell.textContent = '';\n          cell.className = 'field-cell';\n        } else {\n          cell.textContent = newValue;\n          cell.className = `field-cell field-cell--${newValue}`;\n\n          if (oldValue !== newValue) {\n            if (oldValue === 0) {\n              cell.classList.add('field-cell--new');\n\n              setTimeout(() => {\n                cell.classList.remove('field-cell--new');\n              }, 150);\n            } else if (newValue === oldValue * 2) {\n              cell.classList.add('field-cell--merged');\n\n              setTimeout(() => {\n                cell.classList.remove('field-cell--merged');\n              }, 150);\n            }\n          }\n        }\n      });\n    });\n  }\n\n  startButton.addEventListener('click', () => {\n    if (startButton.classList.contains('start')) {\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n      startButton.textContent = 'Restart';\n      messageStart?.classList.add('hidden');\n    } else {\n      game.restart();\n    }\n\n    game.start();\n    game.setStatus('playing');\n    updateGameState();\n  });\n});\n","'use strict';\n\nexport default class Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    if (initialState) {\n      this.state = initialState;\n    } else {\n      // Create empty game board\n      this.state = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Method to set the game status\n  setStatus(newStatus) {\n    this.gameStatus = newStatus;\n  }\n\n  // Method to get the game status\n  getStatus() {\n    return this.status;\n  }\n\n  // Method to get the current state of the board\n  getState() {\n    // Return a copy of the state to prevent unintended modifications\n    return this.state.map((row) => [...row]);\n  }\n\n  // Method to get the current score\n  getScore() {\n    return this.score;\n  }\n\n  // Add this helper method to check if the move changed the board\n  hasChanged(oldState, newState) {\n    return JSON.stringify(oldState) !== JSON.stringify(newState);\n  }\n\n  // Method to move tiles to the left\n  moveLeft() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let row = 0; row < 4; row++) {\n      const cells = this.state[row].filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = 0; i < cells.length - 1; i++) {\n        if (cells[i] === cells[i + 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i + 1, 1);\n          moved = true;\n          i--; // Check the next pair\n        }\n      }\n\n      // Pad with zeros on the right\n      while (cells.length < 4) {\n        cells.push(0);\n      }\n\n      // Check if anything moved\n      if (JSON.stringify(this.state[row]) !== JSON.stringify(cells)) {\n        moved = true;\n      }\n\n      this.state[row] = cells;\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  // Method to move tiles to the right\n  moveRight() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let row = 0; row < 4; row++) {\n      const cells = this.state[row].filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = cells.length - 1; i > 0; i--) {\n        if (cells[i] === cells[i - 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros on the left\n      while (cells.length < 4) {\n        cells.unshift(0);\n      }\n\n      // Check if anything moved\n      if (JSON.stringify(this.state[row]) !== JSON.stringify(cells)) {\n        moved = true;\n      }\n\n      this.state[row] = cells;\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  // Method to move tiles up\n  moveUp() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let col = 0; col < 4; col++) {\n      // Get column as array\n      let cells = [];\n\n      for (let row = 0; row < 4; row++) {\n        cells.push(this.state[row][col]);\n      }\n\n      cells = cells.filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = 0; i < cells.length - 1; i++) {\n        if (cells[i] === cells[i + 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i + 1, 1);\n          moved = true;\n          i--; // Check the next pair\n        }\n      }\n\n      // Pad with zeros at the bottom\n      while (cells.length < 4) {\n        cells.push(0);\n      }\n\n      // Update the column\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== cells[row]) {\n          moved = true;\n          this.state[row][col] = cells[row];\n        }\n      }\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  // Method to move tiles down\n  moveDown() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let col = 0; col < 4; col++) {\n      // Get column as array\n      let cells = [];\n\n      for (let row = 0; row < 4; row++) {\n        cells.push(this.state[row][col]);\n      }\n\n      cells = cells.filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = cells.length - 1; i > 0; i--) {\n        if (cells[i] === cells[i - 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros at the top\n      while (cells.length < 4) {\n        cells.unshift(0);\n      }\n\n      // Update the column\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== cells[row]) {\n          moved = true;\n          this.state[row][col] = cells[row];\n        }\n      }\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  start() {\n    // Reset game board\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'playing';\n\n    // Add two starting tiles\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Helper method to add a random tile\n  addRandomTile() {\n    const emptyPositions = [];\n\n    // Find empty spots on the board\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyPositions.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyPositions.length > 0) {\n      // Place new tile in random empty spot\n      const [row, col] =\n        emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\n\n      // New tile is 2 (90% chance) or 4 (10% chance)\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // Add this method\n  restart() {\n    // Start fresh game\n    this.start();\n  }\n\n  hasAvailableMoves() {\n    // Check for possible horizontal merges\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 3; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    // Check for possible vertical merges\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameEnd() {\n    // First check for 2048 tile (win condition)\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return true;\n        }\n      }\n    }\n\n    // Check for empty cells\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          return false; // Game can continue\n        }\n      }\n    }\n\n    // If no empty cells, check for possible merges\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 3; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return false; // Can still merge horizontally\n        }\n      }\n    }\n\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return false; // Can still merge vertically\n        }\n      }\n    }\n\n    // If we get here, no moves are possible\n    this.status = 'lose';\n\n    return true;\n  }\n\n  // Add protected method for board modifications\n  #updateBoard(newBoard) {\n    const oldState = JSON.stringify(this.state);\n\n    this.state = newBoard;\n\n    return oldState !== JSON.stringify(this.state);\n  }\n}\n"],"names":["$a5fd07fa01589658$export$2e2bcd8739ae039","constructor","initialState","state","score","status","setStatus","newStatus","gameStatus","getStatus","getState","map","row","getScore","hasChanged","oldState","newState","JSON","stringify","moveLeft","moved","scoreIncrease","cells","filter","cell","i","length","splice","push","addRandomTile","checkGameEnd","moveRight","unshift","moveUp","col","moveDown","start","emptyPositions","Math","floor","random","restart","hasAvailableMoves","newBoard","document","addEventListener","game","startButton","querySelector","messageStart","messageLose","messageWin","gameScore","gameField","body","style","overflow","position","width","height","touchStartX","touchStartY","updateGameState","board","rows","querySelectorAll","forEach","rowIndex","cellIndex","newValue","oldValue","parseInt","textContent","classList","className","startsWith","remove","add","setTimeout","e","touches","clientX","clientY","passive","preventDefault","touchEndX","changedTouches","touchEndY","deltaX","deltaY","abs","key","contains"],"version":3,"file":"index.3ef097c2.js.map"}