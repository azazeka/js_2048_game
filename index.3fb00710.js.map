{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_class_private_method_init.js","node_modules/@swc/helpers/esm/_check_private_redeclaration.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $f86983e96b0c893e$export$71511d61b312f219(obj, privateCollection) {\n    if (privateCollection.has(obj)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\n\n\nfunction $ea91727f98d0802f$export$71511d61b312f219(obj, privateSet) {\n    (0, $f86983e96b0c893e$export$71511d61b312f219)(obj, privateSet);\n    privateSet.add(obj);\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar // Add protected method for board modifications\n$3d28d7f1aac198f5$var$_updateBoard = /*#__PURE__*/ new WeakSet();\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $ea91727f98d0802f$export$71511d61b312f219)(this, $3d28d7f1aac198f5$var$_updateBoard);\n        if (initialState) this.state = initialState;\n        else // Create empty game board\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            // Method to set the game status\n            key: \"setStatus\",\n            value: function setStatus(newStatus) {\n                this.gameStatus = newStatus;\n            }\n        },\n        {\n            // Method to get the game status\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            // Method to get the current state of the board\n            key: \"getState\",\n            value: function getState() {\n                // Return a copy of the state to prevent unintended modifications\n                return this.state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        },\n        {\n            // Method to get the current score\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            // Add this helper method to check if the move changed the board\n            key: \"hasChanged\",\n            value: function hasChanged(oldState, newState) {\n                return JSON.stringify(oldState) !== JSON.stringify(newState);\n            }\n        },\n        {\n            // Method to move tiles to the left\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var cells = _this.state[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    // Merge adjacent equal numbers\n                    for(var i = 0; i < cells.length - 1; i++)if (cells[i] === cells[i + 1]) {\n                        cells[i] *= 2;\n                        scoreIncrease += cells[i]; // Add to score when merging\n                        cells.splice(i + 1, 1);\n                        moved = true;\n                        i--; // Check the next pair\n                    }\n                    // Pad with zeros on the right\n                    while(cells.length < 4)cells.push(0);\n                    // Check if anything moved\n                    if (JSON.stringify(_this.state[row]) !== JSON.stringify(cells)) moved = true;\n                    _this.state[row] = cells;\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var moved = false;\n                var scoreIncrease = 0;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.score += scoreIncrease;\n                    this.addRandomTile();\n                    this.checkGameEnd();\n                }\n                return moved;\n            }\n        },\n        {\n            // Method to move tiles to the right\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var cells = _this.state[row].filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    // Merge adjacent equal numbers\n                    for(var i = cells.length - 1; i > 0; i--)if (cells[i] === cells[i - 1]) {\n                        cells[i] *= 2;\n                        scoreIncrease += cells[i]; // Add to score when merging\n                        cells.splice(i - 1, 1);\n                        moved = true;\n                    }\n                    // Pad with zeros on the left\n                    while(cells.length < 4)cells.unshift(0);\n                    // Check if anything moved\n                    if (JSON.stringify(_this.state[row]) !== JSON.stringify(cells)) moved = true;\n                    _this.state[row] = cells;\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var moved = false;\n                var scoreIncrease = 0;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.score += scoreIncrease;\n                    this.addRandomTile();\n                    this.checkGameEnd();\n                }\n                return moved;\n            }\n        },\n        {\n            // Method to move tiles up\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    // Get column as array\n                    var cells = [];\n                    for(var row = 0; row < 4; row++)cells.push(_this.state[row][col]);\n                    cells = cells.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    // Merge adjacent equal numbers\n                    for(var i = 0; i < cells.length - 1; i++)if (cells[i] === cells[i + 1]) {\n                        cells[i] *= 2;\n                        scoreIncrease += cells[i]; // Add to score when merging\n                        cells.splice(i + 1, 1);\n                        moved = true;\n                        i--; // Check the next pair\n                    }\n                    // Pad with zeros at the bottom\n                    while(cells.length < 4)cells.push(0);\n                    // Update the column\n                    for(var row1 = 0; row1 < 4; row1++)if (_this.state[row1][col] !== cells[row1]) {\n                        moved = true;\n                        _this.state[row1][col] = cells[row1];\n                    }\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var moved = false;\n                var scoreIncrease = 0;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (moved) {\n                    this.score += scoreIncrease;\n                    this.addRandomTile();\n                    this.checkGameEnd();\n                }\n                return moved;\n            }\n        },\n        {\n            // Method to move tiles down\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    // Get column as array\n                    var cells = [];\n                    for(var row = 0; row < 4; row++)cells.push(_this.state[row][col]);\n                    cells = cells.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    // Merge adjacent equal numbers\n                    for(var i = cells.length - 1; i > 0; i--)if (cells[i] === cells[i - 1]) {\n                        cells[i] *= 2;\n                        scoreIncrease += cells[i]; // Add to score when merging\n                        cells.splice(i - 1, 1);\n                        moved = true;\n                    }\n                    // Pad with zeros at the top\n                    while(cells.length < 4)cells.unshift(0);\n                    // Update the column\n                    for(var row1 = 0; row1 < 4; row1++)if (_this.state[row1][col] !== cells[row1]) {\n                        moved = true;\n                        _this.state[row1][col] = cells[row1];\n                    }\n                };\n                if (this.gameStatus !== \"playing\") return;\n                var moved = false;\n                var scoreIncrease = 0;\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (moved) {\n                    this.score += scoreIncrease;\n                    this.addRandomTile();\n                    this.checkGameEnd();\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                // Reset game board\n                this.state = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.score = 0;\n                this.status = \"playing\";\n                // Add two starting tiles\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            // Helper method to add a random tile\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyPositions = [];\n                // Find empty spots on the board\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyPositions.push([\n                        row,\n                        col\n                    ]);\n                }\n                if (emptyPositions.length > 0) {\n                    // Place new tile in random empty spot\n                    var _emptyPositions_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyPositions[Math.floor(Math.random() * emptyPositions.length)], 2), row1 = _emptyPositions_Math_floor[0], col1 = _emptyPositions_Math_floor[1];\n                    // New tile is 2 (90% chance) or 4 (10% chance)\n                    this.state[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            // Add this method\n            key: \"restart\",\n            value: function restart() {\n                // Start fresh game\n                this.start();\n            }\n        },\n        {\n            key: \"hasAvailableMoves\",\n            value: function hasAvailableMoves() {\n                // Check for possible horizontal merges\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 3; col++){\n                    if (this.state[row][col] === this.state[row][col + 1]) return true;\n                }\n                // Check for possible vertical merges\n                for(var row1 = 0; row1 < 3; row1++)for(var col1 = 0; col1 < 4; col1++){\n                    if (this.state[row1][col1] === this.state[row1 + 1][col1]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkGameEnd\",\n            value: function checkGameEnd() {\n                // First check for 2048 tile (win condition)\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.state[row][col] === 2048) {\n                        this.status = \"win\";\n                        return true;\n                    }\n                }\n                // Check for empty cells\n                for(var row1 = 0; row1 < 4; row1++)for(var col1 = 0; col1 < 4; col1++){\n                    if (this.state[row1][col1] === 0) return false; // Game can continue\n                }\n                // If no empty cells, check for possible merges\n                for(var row2 = 0; row2 < 4; row2++)for(var col2 = 0; col2 < 3; col2++){\n                    if (this.state[row2][col2] === this.state[row2][col2 + 1]) return false; // Can still merge horizontally\n                }\n                for(var row3 = 0; row3 < 3; row3++)for(var col3 = 0; col3 < 4; col3++){\n                    if (this.state[row3][col3] === this.state[row3 + 1][col3]) return false; // Can still merge vertically\n                }\n                // If we get here, no moves are possible\n                this.status = \"lose\";\n                return true;\n            }\n        }\n    ]);\n    return Game;\n}();\nfunction $3d28d7f1aac198f5$var$updateBoard(newBoard) {\n    var oldState = JSON.stringify(this.state);\n    this.state = newBoard;\n    return oldState !== JSON.stringify(this.state);\n}\n\n\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var updateGameState = function updateGameState() {\n        renderBoard(game.getState());\n        gameScore.textContent = game.getScore();\n        var gameStatus = game.getStatus();\n        messageStart.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n        switch(gameStatus){\n            case \"idle\":\n                messageStart.classList.remove(\"hidden\");\n                startButton.textContent = \"Start\";\n                break;\n            case \"lose\":\n                messageLose.classList.remove(\"hidden\");\n                startButton.textContent = \"Play Again\";\n                break;\n            case \"win\":\n                messageWin.classList.remove(\"hidden\");\n                startButton.textContent = \"Play Again\";\n                break;\n            default:\n                startButton.textContent = \"Restart\";\n        }\n    };\n    var renderBoard = function renderBoard(board) {\n        var rows = document.querySelectorAll(\".field-row\");\n        rows.forEach(function(row, rowIndex) {\n            var cells = row.querySelectorAll(\".field-cell\");\n            cells.forEach(function(cell, cellIndex) {\n                var newValue = board[rowIndex][cellIndex];\n                var oldValue = parseInt(cell.textContent) || 0;\n                cell.classList.forEach(function(className) {\n                    if (className.startsWith(\"field-cell--\")) cell.classList.remove(className);\n                });\n                if (newValue === 0) {\n                    cell.textContent = \"\";\n                    cell.className = \"field-cell\";\n                } else {\n                    cell.textContent = newValue;\n                    cell.className = \"field-cell field-cell--\".concat(newValue);\n                    if (oldValue !== newValue) {\n                        if (oldValue === 0) {\n                            cell.classList.add(\"field-cell--new\");\n                            setTimeout(function() {\n                                cell.classList.remove(\"field-cell--new\");\n                            }, 150);\n                        } else if (newValue === oldValue * 2) {\n                            cell.classList.add(\"field-cell--merged\");\n                            setTimeout(function() {\n                                cell.classList.remove(\"field-cell--merged\");\n                            }, 150);\n                        }\n                    }\n                }\n            });\n        });\n    };\n    var game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)();\n    var startButton = document.querySelector(\".button.start\");\n    var messageStart = document.querySelector(\".message-start\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var messageWin = document.querySelector(\".message-win\");\n    var gameScore = document.querySelector(\".game-score\");\n    var gameField = document.querySelector(\".game-field\");\n    document.body.style.overflow = \"hidden\";\n    document.body.style.position = \"fixed\";\n    document.body.style.width = \"100%\";\n    document.body.style.height = \"100%\";\n    var touchStartX = 0;\n    var touchStartY = 0;\n    var minSwipeDistance = 30;\n    gameField.addEventListener(\"touchstart\", function(e) {\n        touchStartX = e.touches[0].clientX;\n        touchStartY = e.touches[0].clientY;\n    }, {\n        passive: true\n    });\n    gameField.addEventListener(\"touchmove\", function(e) {\n        if (game.getStatus() === \"playing\") e.preventDefault();\n    }, {\n        passive: false\n    });\n    gameField.addEventListener(\"touchend\", function(e) {\n        if (game.getStatus() !== \"playing\") return;\n        var touchEndX = e.changedTouches[0].clientX;\n        var touchEndY = e.changedTouches[0].clientY;\n        var deltaX = touchEndX - touchStartX;\n        var deltaY = touchEndY - touchStartY;\n        if (Math.abs(deltaX) < minSwipeDistance && Math.abs(deltaY) < minSwipeDistance) return;\n        var moved = false;\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n            if (deltaX > 0) moved = game.moveRight();\n            else moved = game.moveLeft();\n        } else if (deltaY > 0) moved = game.moveDown();\n        else moved = game.moveUp();\n        if (moved) updateGameState();\n    }, {\n        passive: false\n    });\n    document.addEventListener(\"keydown\", function(e) {\n        if (game.getStatus() !== \"playing\") return;\n        var moved = false;\n        switch(e.key){\n            case \"ArrowLeft\":\n                moved = game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                moved = game.moveRight();\n                break;\n            case \"ArrowUp\":\n                moved = game.moveUp();\n                break;\n            case \"ArrowDown\":\n                moved = game.moveDown();\n                break;\n            default:\n                return;\n        }\n        if (moved) updateGameState();\n    });\n    startButton.addEventListener(\"click\", function() {\n        if (startButton.classList.contains(\"start\")) {\n            startButton.classList.remove(\"start\");\n            startButton.classList.add(\"restart\");\n            startButton.textContent = \"Restart\";\n            messageStart === null || messageStart === void 0 ? void 0 : messageStart.classList.add(\"hidden\");\n        } else game.restart();\n        game.start();\n        game.setStatus(\"playing\");\n        updateGameState();\n    });\n});\n\n})();\n//# sourceMappingURL=index.3fb00710.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const startButton = document.querySelector('.button.start');\n  const messageStart = document.querySelector('.message-start');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n  const gameScore = document.querySelector('.game-score');\n  const gameField = document.querySelector('.game-field');\n\n  document.body.style.overflow = 'hidden';\n  document.body.style.position = 'fixed';\n  document.body.style.width = '100%';\n  document.body.style.height = '100%';\n\n  let touchStartX = 0;\n  let touchStartY = 0;\n  const minSwipeDistance = 30;\n\n  gameField.addEventListener(\n    'touchstart',\n    (e) => {\n      touchStartX = e.touches[0].clientX;\n      touchStartY = e.touches[0].clientY;\n    },\n    { passive: true },\n  );\n\n  gameField.addEventListener(\n    'touchmove',\n    (e) => {\n      if (game.getStatus() === 'playing') {\n        e.preventDefault();\n      }\n    },\n    { passive: false },\n  );\n\n  gameField.addEventListener(\n    'touchend',\n    (e) => {\n      if (game.getStatus() !== 'playing') {\n        return;\n      }\n\n      const touchEndX = e.changedTouches[0].clientX;\n      const touchEndY = e.changedTouches[0].clientY;\n\n      const deltaX = touchEndX - touchStartX;\n      const deltaY = touchEndY - touchStartY;\n\n      if (\n        Math.abs(deltaX) < minSwipeDistance &&\n        Math.abs(deltaY) < minSwipeDistance\n      ) {\n        return;\n      }\n\n      let moved = false;\n\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (deltaX > 0) {\n          moved = game.moveRight();\n        } else {\n          moved = game.moveLeft();\n        }\n      } else {\n        if (deltaY > 0) {\n          moved = game.moveDown();\n        } else {\n          moved = game.moveUp();\n        }\n      }\n\n      if (moved) {\n        updateGameState();\n      }\n    },\n    { passive: false },\n  );\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        moved = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        moved = game.moveRight();\n        break;\n      case 'ArrowUp':\n        moved = game.moveUp();\n        break;\n      case 'ArrowDown':\n        moved = game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    if (moved) {\n      updateGameState();\n    }\n  });\n\n  function updateGameState() {\n    renderBoard(game.getState());\n    gameScore.textContent = game.getScore();\n\n    const gameStatus = game.getStatus();\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    switch (gameStatus) {\n      case 'idle':\n        messageStart.classList.remove('hidden');\n        startButton.textContent = 'Start';\n        break;\n      case 'lose':\n        messageLose.classList.remove('hidden');\n        startButton.textContent = 'Play Again';\n        break;\n      case 'win':\n        messageWin.classList.remove('hidden');\n        startButton.textContent = 'Play Again';\n        break;\n      default:\n        startButton.textContent = 'Restart';\n    }\n  }\n\n  function renderBoard(board) {\n    const rows = document.querySelectorAll('.field-row');\n\n    rows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('.field-cell');\n\n      cells.forEach((cell, cellIndex) => {\n        const newValue = board[rowIndex][cellIndex];\n        const oldValue = parseInt(cell.textContent) || 0;\n\n        cell.classList.forEach((className) => {\n          if (className.startsWith('field-cell--')) {\n            cell.classList.remove(className);\n          }\n        });\n\n        if (newValue === 0) {\n          cell.textContent = '';\n          cell.className = 'field-cell';\n        } else {\n          cell.textContent = newValue;\n          cell.className = `field-cell field-cell--${newValue}`;\n\n          if (oldValue !== newValue) {\n            if (oldValue === 0) {\n              cell.classList.add('field-cell--new');\n\n              setTimeout(() => {\n                cell.classList.remove('field-cell--new');\n              }, 150);\n            } else if (newValue === oldValue * 2) {\n              cell.classList.add('field-cell--merged');\n\n              setTimeout(() => {\n                cell.classList.remove('field-cell--merged');\n              }, 150);\n            }\n          }\n        }\n      });\n    });\n  }\n\n  startButton.addEventListener('click', () => {\n    if (startButton.classList.contains('start')) {\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n      startButton.textContent = 'Restart';\n      messageStart?.classList.add('hidden');\n    } else {\n      game.restart();\n    }\n\n    game.start();\n    game.setStatus('playing');\n    updateGameState();\n  });\n});\n","'use strict';\n\nexport default class Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    if (initialState) {\n      this.state = initialState;\n    } else {\n      // Create empty game board\n      this.state = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n    }\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Method to set the game status\n  setStatus(newStatus) {\n    this.gameStatus = newStatus;\n  }\n\n  // Method to get the game status\n  getStatus() {\n    return this.status;\n  }\n\n  // Method to get the current state of the board\n  getState() {\n    // Return a copy of the state to prevent unintended modifications\n    return this.state.map((row) => [...row]);\n  }\n\n  // Method to get the current score\n  getScore() {\n    return this.score;\n  }\n\n  // Add this helper method to check if the move changed the board\n  hasChanged(oldState, newState) {\n    return JSON.stringify(oldState) !== JSON.stringify(newState);\n  }\n\n  // Method to move tiles to the left\n  moveLeft() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let row = 0; row < 4; row++) {\n      const cells = this.state[row].filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = 0; i < cells.length - 1; i++) {\n        if (cells[i] === cells[i + 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i + 1, 1);\n          moved = true;\n          i--; // Check the next pair\n        }\n      }\n\n      // Pad with zeros on the right\n      while (cells.length < 4) {\n        cells.push(0);\n      }\n\n      // Check if anything moved\n      if (JSON.stringify(this.state[row]) !== JSON.stringify(cells)) {\n        moved = true;\n      }\n\n      this.state[row] = cells;\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  // Method to move tiles to the right\n  moveRight() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let row = 0; row < 4; row++) {\n      const cells = this.state[row].filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = cells.length - 1; i > 0; i--) {\n        if (cells[i] === cells[i - 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros on the left\n      while (cells.length < 4) {\n        cells.unshift(0);\n      }\n\n      // Check if anything moved\n      if (JSON.stringify(this.state[row]) !== JSON.stringify(cells)) {\n        moved = true;\n      }\n\n      this.state[row] = cells;\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  // Method to move tiles up\n  moveUp() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let col = 0; col < 4; col++) {\n      // Get column as array\n      let cells = [];\n\n      for (let row = 0; row < 4; row++) {\n        cells.push(this.state[row][col]);\n      }\n\n      cells = cells.filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = 0; i < cells.length - 1; i++) {\n        if (cells[i] === cells[i + 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i + 1, 1);\n          moved = true;\n          i--; // Check the next pair\n        }\n      }\n\n      // Pad with zeros at the bottom\n      while (cells.length < 4) {\n        cells.push(0);\n      }\n\n      // Update the column\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== cells[row]) {\n          moved = true;\n          this.state[row][col] = cells[row];\n        }\n      }\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  // Method to move tiles down\n  moveDown() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let scoreIncrease = 0;\n\n    for (let col = 0; col < 4; col++) {\n      // Get column as array\n      let cells = [];\n\n      for (let row = 0; row < 4; row++) {\n        cells.push(this.state[row][col]);\n      }\n\n      cells = cells.filter((cell) => cell !== 0);\n\n      // Merge adjacent equal numbers\n      for (let i = cells.length - 1; i > 0; i--) {\n        if (cells[i] === cells[i - 1]) {\n          cells[i] *= 2;\n          scoreIncrease += cells[i]; // Add to score when merging\n          cells.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      // Pad with zeros at the top\n      while (cells.length < 4) {\n        cells.unshift(0);\n      }\n\n      // Update the column\n      for (let row = 0; row < 4; row++) {\n        if (this.state[row][col] !== cells[row]) {\n          moved = true;\n          this.state[row][col] = cells[row];\n        }\n      }\n    }\n\n    if (moved) {\n      this.score += scoreIncrease;\n      this.addRandomTile();\n      this.checkGameEnd();\n    }\n\n    return moved;\n  }\n\n  start() {\n    // Reset game board\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'playing';\n\n    // Add two starting tiles\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Helper method to add a random tile\n  addRandomTile() {\n    const emptyPositions = [];\n\n    // Find empty spots on the board\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyPositions.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyPositions.length > 0) {\n      // Place new tile in random empty spot\n      const [row, col] =\n        emptyPositions[Math.floor(Math.random() * emptyPositions.length)];\n\n      // New tile is 2 (90% chance) or 4 (10% chance)\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // Add this method\n  restart() {\n    // Start fresh game\n    this.start();\n  }\n\n  hasAvailableMoves() {\n    // Check for possible horizontal merges\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 3; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    // Check for possible vertical merges\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameEnd() {\n    // First check for 2048 tile (win condition)\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return true;\n        }\n      }\n    }\n\n    // Check for empty cells\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          return false; // Game can continue\n        }\n      }\n    }\n\n    // If no empty cells, check for possible merges\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 3; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return false; // Can still merge horizontally\n        }\n      }\n    }\n\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return false; // Can still merge vertically\n        }\n      }\n    }\n\n    // If we get here, no moves are possible\n    this.status = 'lose';\n\n    return true;\n  }\n\n  // Add protected method for board modifications\n  #updateBoard(newBoard) {\n    const oldState = JSON.stringify(this.state);\n\n    this.state = newBoard;\n\n    return oldState !== JSON.stringify(this.state);\n  }\n}\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","import { _ as _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nfunction _class_private_method_init(obj, privateSet) {\n    _check_private_redeclaration(obj, privateSet);\n    privateSet.add(obj);\n}\nexport { _class_private_method_init as _ };\n","function _check_private_redeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\nexport { _check_private_redeclaration as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$3d28d7f1aac198f5$var$_updateBoard","WeakSet","$3d28d7f1aac198f5$export$2e2bcd8739ae039","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","obj","privateCollection","has","privateSet","add","state","score","status","key","value","newStatus","gameStatus","map","row","isArray","iter","Symbol","iterator","oldState","newState","JSON","stringify","_this","moved","scoreIncrease","_loop","cells","filter","cell","splice","push","addRandomTile","checkGameEnd","unshift","col","row1","emptyPositions","_emptyPositions_Math_floor","Math","floor","random","_s","_e","_i","_arr","_n","_d","next","done","err","col1","start","row2","col2","row3","col3","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","document","addEventListener","updateGameState","renderBoard","game","getState","gameScore","textContent","getScore","getStatus","messageStart","classList","messageLose","messageWin","remove","startButton","board","rows","querySelectorAll","forEach","rowIndex","cellIndex","newValue","oldValue","parseInt","className","startsWith","concat","setTimeout","querySelector","gameField","body","style","overflow","position","width","height","touchStartX","touchStartY","e","touches","clientX","clientY","passive","preventDefault","touchEndX","changedTouches","touchEndY","deltaX","deltaY","abs","moveRight","moveLeft","moveDown","moveUp","contains","restart","setStatus"],"version":3,"file":"index.3fb00710.js.map"}